{"version":3,"sources":["webpack:///./src/js/Book.js","webpack:///./src/js/bookComponent.js","webpack:///./src/js/Controller.js","webpack:///./src/index.js"],"names":["Book","constructor","title","author","numOfPages","readStatus","this","toggleRead","MakeBookComponent","pages","read","index","render","card","document","createElement","classList","add","innerHTML","Controller","formatLongNums","myLibrary","bookShelf","querySelector","handleBookAdd","bind","addBookToLibrary","book","push","storeBooksToLocalStorage","num","arr","String","split","fmtarr","length","i","pop","reverse","join","populateShelf","bookIndex","forEach","appendChild","bookRemoveBtns","querySelectorAll","addEventListener","handleBookRemove","updateReadBtns","handleReadUpdate","objs","obj","localStorage","setItem","JSON","stringify","getFromLocalStorage","myBooksJson","getItem","parse","splice","parseInt","dataset","titleBtn","authorBtn","pagesBtn","readBtn","bookTitle","value","bookAuthor","bookPages","valueAsNumber","bookRead","checked","console","log","controller","addBookForm","style","top","window","visualViewport","height","scrollY","remove"],"mappings":"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","file":"main.js","sourcesContent":["export default class Book {\n  constructor(title=\"unavailable\", author=\"unknown\", numOfPages=0, readStatus=false) {\n      this.title = title;\n      this.author = author;\n      this.numOfPages = numOfPages;\n      this.readStatus = readStatus;\n  }\n  \n  toggleRead() {\n      this.readStatus = !this.readStatus;\n  }\n}","import Controller from \"./Controller\";\nexport default class MakeBookComponent {\n  constructor(title, author, pages, read, index) {\n    this.title = title;\n    this.author = author;\n    this.pages = pages;\n    this.read = read;\n    this.index = index;\n  }\n  render() {\n    let card = document.createElement('div');\n    card.classList.add('book-card');\n    card.innerHTML = `\n      <p class=\"book-title\">${this.title}</p>\n      <p class=\"book-author\">${this.author}</p>\n      <p class=\"book-pages\">Total Pages: ${Controller.formatLongNums(this.pages)}</p>\n      <p class=\"book-read\">Has been read: ${this.read}</p>\n      <div>\n        <button class=\"inbook-btn inbook-read-btn\" type=\"button\" data-index=\"${this.index}\">Read?</button>\n        <button class=\"inbook-btn inbook-remove-btn\" type=\"button\" data-index=\"${this.index}\">Remove</button>\n      </div>\n    `;\n\n    return card;\n  }\n}","import Book from \"./Book.js\";\nimport MakeBookComponent from \"./bookComponent.js\";\n\nexport default class Controller {\n  constructor() {\n    this.myLibrary = [];\n    this.bookShelf = document.querySelector('.books-wrapper');\n    this.handleBookAdd = this.handleBookAdd.bind(this);\n  }\n  \n  addBookToLibrary(title, author, numOfPages, readStatus) {\n    const book = new Book(title, author, numOfPages, readStatus);\n    this.myLibrary.push(book);\n    this.storeBooksToLocalStorage();\n  }\n\n  static formatLongNums(num) {\n    let arr = String(num).split(\"\");\n    let fmtarr = [];\n    while (arr.length != 0) {\n      for (let i = 0; i < 3; i++) {\n        if (arr) {\n          fmtarr.push(arr.pop())\n        }\n      }\n      if (arr.length != 0) {\n        fmtarr.push(',');\n      }\n    }\n    return fmtarr.reverse().join('');\n  }\n  \n  populateShelf() {\n    this.bookShelf.innerHTML = \"\";\n    let bookIndex = 0;\n    this.myLibrary.forEach(book => {\n      let card = new MakeBookComponent(book.title,\n        book.author,\n        book.numOfPages,\n        book.readStatus,\n        bookIndex);\n      \n      this.bookShelf.appendChild(card.render());\n      bookIndex++;\n    });\n    // event listeners for card removal\n    let bookRemoveBtns = document.querySelectorAll(\".inbook-remove-btn\");\n    if (bookRemoveBtns) {\n      bookRemoveBtns.forEach( book => book.addEventListener('click', () => {\n        this.handleBookRemove(book);\n      }));\n    }\n    let updateReadBtns = document.querySelectorAll(\".inbook-read-btn\");\n    if (updateReadBtns) {\n      updateReadBtns.forEach( book => book.addEventListener('click', () => {\n        this.handleReadUpdate(book);\n      }));\n    }\n  }\n  \n  storeBooksToLocalStorage() {\n      let objs = [];\n      this.myLibrary.forEach( book => {\n          const obj = {\n              title: book.title,\n              author: book.author,\n              numOfPages: book.numOfPages,\n              readStatus: book.readStatus\n          }\n          objs.push(obj);\n      });\n      // console.log(JSON.stringify(objs));\n      localStorage.setItem(\"booklist\", JSON.stringify(objs));\n  }\n  \n  getFromLocalStorage() {\n      let myBooksJson = localStorage.getItem(\"booklist\");\n      if (myBooksJson == null) {\n          this.myLibrary = [];\n      }\n      else {\n          let myBookObjs = JSON.parse(myBooksJson);\n          myBookObjs.forEach( book=> {\n           let {title, author, numOfPages, readStatus} = book;\n           //  console.log(title, author, numOfPages, readStatus);\n           this.addBookToLibrary(title, author, numOfPages, readStatus);\n          });\n      }\n  }\n  \n  handleBookRemove(book) {\n      // console.log(this);\n      this.myLibrary.splice(parseInt(book.dataset.index), 1);\n      this.populateShelf();\n      this.storeBooksToLocalStorage();\n  }\n  \n  handleBookAdd() {\n      const titleBtn = document.querySelector('#book-title-input');\n      const authorBtn = document.querySelector('#book-author-input');\n      const pagesBtn = document.querySelector('#book-pages-input');\n      const readBtn = document.querySelector('#book-read-input');\n  \n      const bookTitle = titleBtn.value;\n      const bookAuthor = authorBtn.value;\n      const bookPages = pagesBtn.valueAsNumber;\n      const bookRead = readBtn.checked;\n      // console.log({bookTitle, bookAuthor, bookPages, bookRead});\n      this.addBookToLibrary(bookTitle, bookAuthor, bookPages, bookRead);\n      // reset the values of all inputs for next submission\n      titleBtn.value = \"\";\n      authorBtn.value = \"\";\n      pagesBtn.value = \"\";\n      readBtn.checked = false;\n      this.populateShelf();\n  }\n  \n  handleReadUpdate(book) {\n      // console.log('inside handleReadUpdate:');\n      // console.log(this);\n      this.myLibrary[parseInt(book.dataset.index)].toggleRead();\n      this.populateShelf();\n      this.storeBooksToLocalStorage();\n  }\n\n};\n","import \"./css/styles.scss\";\nimport Controller from \"./js/Controller.js\";\nconsole.log('im in...')\n\nconst controller = new Controller();\n\ncontroller.getFromLocalStorage();\ncontroller.populateShelf();\n// Add book popup form\nconst addBookForm = document.querySelector(\"#add-book-form\");\nconst newBookBtn = document.querySelector(\"#new-book\");\nnewBookBtn.addEventListener('click', ()=> {\n    addBookForm.style.top = `${(window.visualViewport.height / 2) + window.scrollY}px`;\n    addBookForm.classList.remove(\"hide\");\n});\n\n// close popup form to add book\nconst cancelBookBtn = document.querySelector('#cancel-book-btn');\ncancelBookBtn.addEventListener('click', () => addBookForm.classList.add('hide'));\n\n// Add book to book list from form\nconst addBookBtn = document.querySelector('#add-book-btn');\naddBookBtn.addEventListener('click', () => {\n  controller.handleBookAdd();\n  addBookForm.classList.add('hide');\n});"],"sourceRoot":""}